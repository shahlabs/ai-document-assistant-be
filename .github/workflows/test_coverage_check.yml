name: Test Coverage Check and Generation

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  coverage-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
      with:
        token: ${{ secrets.PAT_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov openai dotenv flask flask_cors
        
    - name: Verify Open AI Key Exist
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  # Must match secret name exactly
      run: |
        # Add validation check
        if [ -z "$OPENAI_API_KEY" ]; then
        echo "OPENAI_API_KEY is empty!"
        exit 1
        else
        echo "OPENAI_API_KEY is set (value hidden)"
        fi

    - name: Test OpenAI Connection
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        # Simple validation (won't leak key)
        curl -s -H "Authorization: Bearer $OPENAI_API_KEY" \
          https://api.openai.com/v1/models \
          | jq -e '.data[].id' > /dev/null
    
    - name: Run tests and check coverage
      run: |
        pytest --cov=src tests/ --cov-report=xml

    - name: Generate tests if coverage is low
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        GITHUB_REPOSITORY: ${{ github.repository }}
      run: |
        python .github/scripts/generate_tests.py
